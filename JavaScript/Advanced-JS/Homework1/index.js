// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

const musicCollection = {
  albums: [
    {
      title: "Qwe",
      artist: "Rty",
      year: "1234",
    },
    {
      title: "Asd",
      artist: "Fgh",
      year: "4567",
    },
    {
      title: "Zxc",
      artist: "Vbn",
      year: "7890",
    },
  ],
  [Symbol.iterator]: function () {
    let current = 0;
    const to = this.albums.length;
    return {
      next: () => {
        return current < to
          ? { value: this.albums[current++], done: false }
          : { done: true };
      }
    };
  },
};

for (let album of musicCollection) {
  console.log(`Альбом: ${album.title}, Артист: ${album.artist}, Год выпуска: ${album.year}`);
}

// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

const cooks = new Map();
cooks.set("Виктор", "Пицца");
cooks.set("Ольга", "Суши");
cooks.set("Дмитрий", "Десерты");

const dishes = new Map();
dishes.set("Пицца 'Маргарита'", "Виктор");
dishes.set("Пицца 'Пепперони'", "Виктор");
dishes.set("Суши 'Филадельфия'", "Ольга");
dishes.set("Суши 'Калифорния'", "Ольга");
dishes.set("Тирамису", "Дмитрий");
dishes.set("Чизкейк", "Дмитрий");

const orders = new Map();
orders.set("Алексей", ["Пицца 'Пепперони'", "Тирамису"]);
orders.set("Мария", ["Суши 'Калифорния'", "Пицца 'Маргарита'"]);
orders.set("Ирина", ["Чизкейк"]);

console.log(`Повар: ${dishes.get(orders.get("Алексей")[1])}`);
console.log(`Специализация: ${cooks.get(dishes.get(orders.get("Алексей")[1]))}`);

console.log(`Повар: ${dishes.get(orders.get("Мария")[0])}`);
console.log(`Специализация: ${cooks.get(dishes.get(orders.get("Мария")[0]))}`);
